local druid = require("druid.druid")
local slider_extension = require("druid.extended.slider")
local hover_shadow_style = require("modules.hover_button")

-- Register the extended slider component


local function register_druid_extended_components(self)
	druid.register("slider", slider_extension)
end
function init(self)
	self.druid = druid.new(self)
	register_druid_extended_components(self)

	-- Initialize the slider
	self.my_slider = self.druid:new_slider("slider_simple_pin", vmath.vector3(95, 0, 0), function(_, value)
		-- Update the slider text as a percentage
		local percentage = math.ceil(value * 100)
		gui.set_text(gui.get_node("slider_simple_text"), percentage .. "%")
		
		self.play = self.druid:new_button("play", dismiss)	

		-- Update the bet input field with the scaled value
		if self.bet then
			local scaled_value = math.ceil(value * 200)
			self.bet:set_text(tostring(scaled_value))
		end
	end)

	self.my_slider:set(0.2)
	self.my_slider:set_input_node("slider_input")

	-- Initialize the bet input field
	self.bet = self.druid:new_input("silver", "wager")
	
	-- Bind the play_lane function with the specific node id for each button
	local custom_style1 = self.druid:new_button("select_1/button", function() select_level(self, "select_1") end)
	custom_style1:set_style(hover_shadow_style)

	local custom_style2 = self.druid:new_button("select_2/button", function() select_level(self, "select_2") end)
	custom_style2:set_style(hover_shadow_style)

	local custom_style3 = self.druid:new_button("select_3/button", function() select_level(self, "select_3") end)
	custom_style3:set_style(hover_shadow_style)
end

--
function select_level(self, node_id)
	
	local pattern = "select_(%d+)"
	local choice = node_id:match(pattern)

	-- Convert extracted values to numbers
	choice = tonumber(choice)

	print(choice)
	highlight_choice(self, choice)
end

function highlight_choice(self, choice)
	-- Animation names in the atlas
	local opponent_texture = "opponent"
	local player_texture = "player"

	-- Iterate through each choice sprite
	for i = 1, 3 do
		local sprite_id = "choice_" .. i
		local sprite_node = gui.get_node(sprite_id)

		-- Check if the current sprite is the selected choice
		if i == choice then
			gui.play_flipbook(sprite_node, opponent_texture)
		else
			gui.play_flipbook(sprite_node, player_texture)
		end
	end
end
function dismiss(self)
	-- Get the root node of the GUI scene
	local root_node = gui.get_node("root")

	-- Disable (hide) the root node and all its children
	gui.set_enabled(root_node, false)
end

function final(self)
	self.druid:final()
end


function update(self, dt)
	self.druid:update(dt)
end


function on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
end


function on_input(self, action_id, action)
	return self.druid:on_input(action_id, action)
end
