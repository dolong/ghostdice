local druid = require("druid.druid")
local slider_extension = require("druid.extended.slider")
local hover_shadow_style = require("modules.hover_button")

-- Register the extended slider component


local function register_druid_extended_components(self)
end
function init(self)
	self.druid = druid.new(self)
	self.play = self.druid:new_button("roll", close)
	self.click_count = 0  -- Initialize click counter



	
end

function close(self)
	self.click_count = self.click_count + 1  -- Increment click counter

	local text_prompt = gui.get_node("prompt_text1")
	
	if self.click_count == 1 then
		msg.post("loginpage#loginmenu", "play_next")
		-- First click actions

		gui.set_text(text_prompt, "Choose a Lane")

		msg.post("loginpage#loginmenu", "disable_next")
-- 		local arrows = gui.get_node("arrows")
-- 		gui.set_enabled(arrows, true)
-- 

	elseif self.click_count == 2 then
		msg.post("loginpage#loginmenu", "enable_starting_arrows")
		-- Second click actions
		local root_node = gui.get_node("root")
		gui.set_enabled(root_node, false)
		local shadow_bg = gui.get_node("shadow_bg")
		gui.set_enabled(shadow_bg, false)
	end
end

function final(self)
	self.druid:final()
end


function update(self, dt)
	self.druid:update(dt)
end


function on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
	local text_prompt = gui.get_node("prompt_text1")
	if message_id == hash("user_wins") then
		-- Enable the root node
		local root_node = gui.get_node("root")
		gui.set_enabled(root_node, true)

		gui.set_text(text_prompt, "You Win!")

		local arrows = gui.get_node("arrows")
		gui.set_enabled(arrows, false)
		
		-- Reset the click counter
		self.click_count = 2
	end

	if message_id == hash("user_loses") then
		-- Enable the root node
		local root_node = gui.get_node("root")
		gui.set_enabled(root_node, true)

		gui.set_text(text_prompt, "You Lose!")

		-- Reset the click counter
		self.click_count = 2
	end
end


function on_input(self, action_id, action)
	return self.druid:on_input(action_id, action)
end
