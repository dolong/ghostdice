--import cursor script from /in folder
local cursor = require "in.cursor"
local canDragCard = false
local gameManager = "/gameManager#gameManager"
local isZooming = false
local zoomedCard
local cardNamesModule = require "modules.card"  
local cardDataModule = require "modules.cardData"  
local zonesModule = require "modules.zones"
local playersModule = require "modules.player"
local turnActionsModule = require "modules.turnActions"
local zoomedCardID = nil
local render_helper = require "modules.render_helper"

local camera = require "orthographic.camera"
local cursor = require "in.cursor"


function init(self)
	--if the cursor doesn't already have input focus, assign it input focus, and forward any input messages to be parsed by the on_message function

	local CAMERA_ID = hash("/camera")
	msg.post(".", "acquire_input_focus")
	
	--listen for cursor drag input
	cursor.listen(msg.url("#cursor"), cursor.DRAG_START, function (message_id, message)
		if message.group == hash("playerCard") or message.group == hash("opponentCard") then
			if canDragCard == false then
				return true
			end
			print("Dragging a card!")
			dragingcard = true
		elseif message.group == hash("dropzone") then
			--prevent dragging of dropzones

			dragingcard = true
			return true
		end

	end)
end

local function is_card(message_group)
	return message_group == hash("playerCard") or message_group == hash("opponentCard")
end

--listen for user input
function on_input(self, action_id, action)
	local screen = vmath.vector3(action.x, action.y, 0)
	local world = camera.screen_to_world(CAMERA_ID, screen)
	action.x = world.x
	action.y = world.y
	msg.post("#cursor", "input", { action_id = action_id, action = action })

	-- handle camera drag - but only if cursor isn't over something
	if not self.over then
		if action.pressed then
			self.pressed_position = vmath.vector3(screen)
			self.camera_position = go.get_position(CAMERA_ID)
			camera.unfollow(CAMERA_ID)
		elseif action.released then
			self.pressed_position = nil
		elseif self.pressed_position then
			local diff = screen - self.pressed_position
			go.set_position(self.camera_position - diff, CAMERA_ID)
		end
	end
end

--listen for type of user input
function on_message(self, message_id, message, sender)

-- 	if message_id == cursor.OVER or message_id == cursor.OUT or message_id == cursor.DRAG_START or message_id == cursor.DRAG_END or message_id == cursor.DRAG then
-- 		local game_position = render_helper.action_to_position({ screen_x = message.x, screen_y = message.y })
-- 		message.x = game_position.x
-- 		message.y = game_position.y
-- 
-- 		-- Here, you can get the registered object details based on its id
-- 		local object_data = render_helper.get_object(message.id)
-- 		if object_data then
-- 			-- Translate based on the registered object's details
-- 			message.x = game_position.x + object_data.position.x
-- 			message.y = game_position.y + object_data.position.y
-- 		end
-- 		
-- 	end

	
	if message_id == cursor.OVER then
		--print("Cursor over", transformed_pos.group)
		print("Cursor over", message.id, message.group, message.x, message.y)
		--track when the cursor enters over the dropzone
		if message.group == hash("dropzone") then
			self.over_dropzone = true
			if message.id == hash("/dropzone") then 
				print("First Drop Zone")
				self.zone = 1
			elseif message.id == hash("/dropzone1") then 
				print("Second Drop Zone")
				self.zone = 2
			elseif message.id == hash("/dropzone2") then 
				print("Third Drop Zone")
				self.zone = 3
			end
			print("Cursor over dropzone ", message.id, message.group, message.x, message.y)
		else 
			self.over_dropzone = false
			self.zone = 0
		end
		--if not already zooming, determine what kind of card the cursor is over, and create a zoomed in version of that card
		if is_card(message.group) then
			local zoomTimer = nil
			
			print("message.id:", tostring(message.id))
			print('this is a card')
			
			
			if isZooming and message.id == zoomedCardID then
				print('already zooming', zoomedCardID)
				return -- exit early if hovering over the zoomedCard
			end
			
			print("message.id:", tostring(message.id))

			local card = cardDataModule.cards[tostring(message.id)]
			if card then
				print(card.name, card.cost, card.power)


				if not isZooming then
					if message.group == hash("playerCard") then
						zoomedCard = factory.create("/spawner#playerCardFactory", vmath.vector3(message.x, (message.y + 240), 0.1), nil, {isDraggable = true}, 1)
						zoomedCardID = zoomedCard
						msg.post(zoomedCard, "set_name", {name = card.name})
						msg.post(zoomedCard, "set_cost", {cost = card.cost})
						msg.post(zoomedCard, "set_power", {power = card.power})
						msg.post(zoomedCard, "initialize_and_disable_collision")
					else
						--check if this is used
						zoomedCard = factory.create("/spawner#opponentCardFactory", vmath.vector3(message.x, (message.y + 400), 1), nil, nil, 0.66)
						zoomedCardID = zoomedCard
						delay_and_disable_collision(zoomedCard)
					end
					isZooming = true
				end
				
			else
				print("No card found for ID:", tostring(message.id))
			end
			
		end
	elseif message_id == cursor.OUT then
		--track when the cursor leaves over the dropzone
		if message.id == hash("dropzone") then
			self.over_dropzone = false
			print('not over')
		end
		--delete the zoomed card and return isZooming to false
		if message.group == hash("playerCard") or message.group == hash("opponentCard") and isZooming then
			go.delete(zoomedCard)
			isZooming = false
		end
	elseif message_id == cursor.PRESSED then
		--track when the cursor enters over a card
		if message.group == hash("playerCard") or message.group == hash("opponentCard") then
			local url = msg.url(message.id)
			url.fragment = "card"
			canDragCard = go.get(url, "isDraggable")
		end
	elseif message_id == cursor.RELEASED then
		--uncomment to print("Released", message.id, message.group, message.x, message.y)
		if message.group == hash("playerCard") or message.group 
		== hash("opponentCard") then
			canDragCard = false
		end
	elseif message_id == cursor.CLICKED then
	elseif message_id == cursor.DRAG_START then
	elseif message_id == cursor.DRAG_END then
		print("Drag ended", message.id, message.group, message.x, message.y)

		if is_card(message.group) and self.over_dropzone then
			local card = cardDataModule.cards[tostring(message.id)]
			local zone = self.zone
			print('Trying to drop in dropzone')

			if card and playersModule.check_drop_requirements(card.cost) then
				-- Subtract the cost of the card from player's energy
				playersModule.set_energy(playersModule.get_energy() - card.cost)
				msg.post("/energy#energy", "update_energy")

				move_card_to_zone(message.id, zone)
				
				local player = playersModule.get_id()
				
				turnActionsModule.queue_message(self.zone, player, card.name, card.power, card.cost)
				
			else
				print("Not enough energy or card not found.")
			end
		else
			local zPos = go.get(gameManager, "zPosition")
			dragingcard = false
			
		end
		
	elseif message_id == cursor.DRAG then
	end

	
	function move_card_to_zone(message_id, zone)

		print('moving card to zone')
		local zPos = go.get(gameManager, "zPosition")
		local cardsInDropZone = go.get(gameManager, "cardsPlayed")

		local slotx, sloty = zonesModule.calculate_slot_position(cardsInDropZone)		
		local p = vmath.vector3(128 + ((zone-1)*200) + slotx, 455 + sloty, 0)
		
		go.set_position(p, message_id)

		go.set_scale(0.44, message_id)
		
		-- Make cards not draggable once dropped
		local url = msg.url(message_id)
		url.fragment = "card"
		go.set(url, "isDraggable", false)

		-- Increment the number of cards played and the zPosition in the gameManager
		go.set(gameManager, "cardsPlayed", (cardsInDropZone + 1))
		go.set(gameManager, "zPosition", (zPos + 0.01))

		-- Add the card to the zone
		zonesModule.add_card(zone, tostring(message_id))

		-- Refresh the zones after the card is played
		zonesModule.refresh_zone_tile_power()
		
	end
	
	function disable_collision(object_url)
		msg.post(object_url .. "#collisionobject", "disable")
	end

	function delay_and_disable_collision(object)
		timer.delay(0.1, false, function()
			disable_collision(object)
		end)
	end

end
