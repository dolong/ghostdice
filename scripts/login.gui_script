local button = require "in.button"
local playersModule = require "modules.player"
local druid = require("druid.druid")
local input = require("druid.extended.input")
local progress = require("druid.extended.progress")
local timer_component = require("druid.extended.timer")

local function get_query_parameters()
	if html5 then
		local url = html5.run("window.location")
		-- get the query part of the url (the bit after ?)
		local query = url:match(".*?(.*)")
		if not query then
			return {}
		end

		local params = {}
		-- iterate over all key value pairs
		for kvp in query:gmatch("([^&]+)") do
			local key, value = kvp:match("(.+)=(.+)")
			params[key] = value
		end
		return params
	else 
		return { user = "desktop" }
	end
end

local function login()
	print ("Pressing login!")
	msg.post("loginpage#collectionproxy", "load")
end

local function search()
	print ("Pressing Search!")
	msg.post("loginpage#searchproxy", "load")
end

local function on_button_callback(self)
	print("Start Button was clicked!")

	local text = self.login_name:get_text()
	print(text)
	local player = playersModule.set_id(text)
	login() -- Call the login function when the button is clicked.
end

local function on_button_callback2(self)
	print("Search Button was clicked!")

	local text = self.login_name:get_text()
	print(text)
	local player = playersModule.set_id(text)
	search() -- Call the search function when the button is clicked.
end

local function register_druid_extended_components(self)
	druid.register("input", input)
	druid.register("progress", progress)
	druid.register("timer", timer_component)
end

local function on_input_select(self)
	print("Input box selected!")
	self.login_name:set_text("") -- Clear the text when the input box is selected
end

function init(self)
	local params = get_query_parameters() 
	local user = params.user

	local userid_node = gui.get_node("userid")

	-- Set the text
	if (user) then
		gui.set_text(userid_node, "logged in as: " .. user)
	end
	self.druid = druid.new(self)
	register_druid_extended_components(self)
	self.button = self.druid:new_button("loginbutton", on_button_callback)
	self.button = self.druid:new_button("SearchB/button", on_button_callback2)
	self.login_name = self.druid:new_input("inputbox", "username")


	-- Subscribe to the on_input_select event
	self.login_name.on_input_select:subscribe(on_input_select, self)
end


function final(self)
	self.druid:final()
	-- button.unregister()
end


function on_input(self, action_id, action)
	--print("Handling input: " .. tostring(action_id))
	if action_id == hash("input_select") then
		print("selected")
		on_input_select(self, action_id, action)
	end
	return self.druid:on_input(action_id, action)
	-- button.on_input(action_id, action)
end

-- 
-- -- "update" is used in progress bar, scroll, and timer basic components
-- function update(self, dt)
-- 	self.druid:update(dt)
-- end

function on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender) -- Druid's on_message

	if message_id == hash("proxy_loaded") then
		-- When the collection has loaded, we enable it
		msg.post(sender, "enable")

		-- And then disable the login collection
		msg.post(".", "disable")
	end
end