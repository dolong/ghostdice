local druid = require("druid.druid")
local playersModule = require "modules.player"
local loadDeckModule = require "modules.loadDeck"
local incrementer = 0.2
local function increment_progress(self)
	self.progress_value = self.progress_value + 0.1  -- Increment the progress value by 10%
	if self.progress_value > 1 then
		self.progress_value = 1  -- Cap the progress value at 100%
	end

	-- Update the progress bar using Druid's API:
	self.progress_x:to(self.progress_value)
	self.progress_y:set_to(self.progress_value)

	-- Restart the timer if the progress value is less than 100%
	if self.progress_value < 1 then
		self.timer:reset()  -- Reset the timer to start counting again
	end
end

local function on_button_set_0(self)
	print("self.progress_x: ", self.progress_x)
	self.progress_x:to(0)
end


local function on_button_add_25(self)
	self.progress_x:to(self.progress_x:get() + 0.25)
end


local function on_button_set_100(self)
	self.progress_x:to(1)
	msg.post("searchpage#mainproxy", "load")
end


local function on_progress_step(self, value)
	print(value)
	if (value > 0.8)  then
		print(value)
		incrementer = 0.01
		
		if (loadDeckModule.getDeckLoaded() == true) then
			self.progress_x:to(1)
			msg.post("searchpage#mainproxy", "load")
		end
		
	end
end

function init(self)
	self.druid = druid.new(self)

	self.progress_x = self.druid:new_progress("progress_fill_x", "x", 0)
	self.progress_x:set_steps({0, 0.3, 0.6, 0.7, 0.8, 0.9, 1}, on_progress_step)
	self.progress_x.on_change:subscribe(function(_, value)
		value = math.floor(value * 100)
		gui.set_text(gui.get_node("text_progress_amount_x"), value .. "%")
	end)

	self.progress_value = 0  -- Initialize the progress value
	self.timer = 0  -- Initialize a simple timer value

	self.druid:new_button("button_set_0/button", on_button_set_0)
	self.druid:new_button("button_add_25/button", on_button_add_25)
	self.druid:new_button("button_set_100/button", on_button_set_100)

	loadDeckModule.callDrawCardsExternal()
	--msg.post("loadDeckModule", "draw_cards") 
	
end

function final(self)
	self.druid:final()
end



function update(self, dt)
	self.timer = self.timer + dt  -- Increment the timer by delta time

	if self.timer >= 1 then  -- Check if a second has passed
		self.timer = self.timer - 1  -- Reset the timer by 1 second
		self.progress_value = self.progress_value + incrementer  -- Increment the progress value by 10%
		if self.progress_value > 1 then
			self.progress_value = 0.9  -- Cap the progress value at 100%
		end
		self.progress_x:to(self.progress_value)  -- Update the progress bar using Druid's API
	end

	self.druid:update(dt)  -- Make sure to keep this line to update Druid components
end



function on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)


	if message_id == hash("proxy_loaded") then
		-- When the collection has loaded, we enable it
		msg.post(sender, "enable")

		-- And then disable the login collection
		msg.post(".", "disable")
	end
end


function on_input(self, action_id, action)
	return self.druid:on_input(action_id, action)
end
